#!/bin/sh

# "config" walks through configuring a new debian root filesystem
# steps are:
# - create a filesystem on /tmp/newroot
# - configure host name
# - configure network
# - debootstrap
# - fix up installation:
#    password,shadow
#    hostname
#    ssh PermitRootLogin
#    label filesystem
#    add leds udev rule

mp=/tmp/newroot
default_debian_suite=buster
default_debian_mirror="http://httpredir.debian.org/debian"
include_packages="vim,openssh-server,ntpdate,cron,locales,udev,fake-hwclock,mtd-utils,ca-certificates,apt-transport-https,vlan,bash-completion,less,man-db,manpages,dbus"

set_host() {
    case `hostname` in
	"(none)") ;;
	* ) echo "## Hostname set to `hostname`";
	    return 0
    esac

    echo -n "Choose hostname (default gnubee.gnubee): "
    read h
    case $h in
	"" ) hostname gnubee.gnubee;;
	*" "*) ;;
	* ) hostname $h
    esac
    return 1
}

set_debian() {
	while [ -z "$debian_suite" ]; do
		read -p "Which Debian suite do you want to install? (jessie | stretch | buster | bullseye | sid) [buster] " debian_suite
		case "$debian_suite" in
			"" ) debian_suite="$default_debian_suite" ;;
			jessie | stretch | buster | bullseye | sid ) ;;
			* ) echo "Unknown debian suite. Please enter one of the above choices."
		esac
	done
	while [ -z "$debian_mirror" ]; do
		read -p "Which Debian mirror do you want to use? [$default_debian_mirror]" debian_mirror
		debian_mirror="${debian_mirror%/}"
		case "$debian_mirror" in
			"" ) debian_mirror="$default_debian_mirror" ;;
			* )
				echo -n "Validating mirror URL ... "
				if wget -q --spider "$debian_mirror/debian/dists/$debian_suite/Release.gpg"; then
					echo "OK."
				else
					echo "ERROR, please enter a valid Debian mirror URL."
					debian_mirror=
				fi
		esac
	done

}

check_net() {
    net_dev=`ip route show match 0/0 | awk '$4 == "dev" {print $5 }'`
    if [ -z "$net_dev" ]; then
	return 1
    fi

    net_ip=`ip addr show $net_dev | awk '$1 == "inet" {print $2; exit}'`
    return 0
}

set_passwd() {
    if grep 'l80E2NNrh32z0N$HX1nhaV6TcdM3OcMm8PVyzQZAl6c9Q2GYugdS9MuDcG6Nkx' /etc/shadow > /dev/null
    then :
    else echo "## root password changed"
	 return 0
    fi
    echo "Please set the root password."
    passwd root
    return 1
}

set_net() {
    if check_net; then
	[ -f /etc/resolv.conf ] || echo nameserver 8.8.8.8 > /etc/resolv.conf
	echo "## network configured - $net_ip"
	return 0
    fi
    if ps | grep '[u]dhcpc' > /dev/null; then
	echo "## waiting for network..."
	sleep 5
	if route -n 2> /dev/null | grep '^0\.0\.0\.0' > /dev/null; then
	    ip=`ip addr show | awk '$1 == "inet" { print $2;exit}'`
	    echo "## network configured - $ip"
	    return 0
	fi
	killall udhcpc
    fi

    dev=ethblack
    echo -n "Configure network ($dev) [s]tatic [d]hcp or [m]anual? "
    read ans
    case $ans in
	[Mm]* ) echo "Please configure network, create a default route, and restart."
		echo nameserver 8.8.8.8 > /etc/resolv.conf
		exit 0
		;;
	[Dd]* ) ifconfig $dev up ; udhcpc -i $dev -s /udhcpc.script;
		;;
	[Ss]* ) echo -n "IP address (192.168.1.10)? "
		read IP
		t="$IFS"; IFS=.; set $IP; IFS="$t"
		gw=$1.$2.$3.1
		echo -n "Netmask (255.255.255.0)? "
		read NETMASK
		echo -n "Gateway ($gw)? "
		read GATE
		echo -n "DNS server (8.8.8.8)? "
		read DNS
		echo "### If you have chosen a new IP address, your connection will"
		echo "### stop working now.  Re-connect with hthe new address."
		killall udhcpc
		ifconfig $dev ${IP:-192.168.1.10} up netmask ${NETMASK:-255.255.255.0}
		route add default  gw ${GATE:-$gw}
		echo nameserver ${DNS:-8.8.8.8} > /etc/resolv.conf
		;;
    esac
    return 1
}

set_time() {
    rm -f /tmp/stamp
    > /tmp/stamp
    newer=`find /init -newer /tmp/stamp`
    if [ -z "$newer" ]; then
	echo "## time is set: `date`"
        return 0
    fi
    ntpdate pool.ntp.org
    return 1
}

create_filesystem() {
    if grep $mp /proc/mounts > /dev/null ; then
	echo "## $mp mounted"
	return 0
    fi
    mkdir -p $mp
    echo "Detecting connected partitions, please wait a few moments."
    OPTIONS=`blkid | grep "/dev/sd\|/dev/mmcblk0p\|/dev/md"`
    echo "$OPTIONS"
    echo -n 'Enter device, or "manual" to create md array manually: '
    read dev
    if echo "$OPTIONS" | grep "^${dev}:" ; then
	echo -n "Confirm creating filesystem on $dev [yN]? "
	read ans
	case $ans in
	    [Yy]* ) mkfs.ext4 $dev && mount -t ext4 $dev $mp ;;
	esac
	return 1
    fi
    case $dev in
	m | manual ) echo "Please create the device, and run ./config again"
		     exit 0
    esac
    return 1
}

bootstrap() {
    if [ -f $mp/etc/debian_version ]; then
	echo "## Debian is installed"
	return 0
    fi
    PATH=/bin:/usr/bin:/sbin:/usr/sbin:$PATH
    export PATH
    debootstrap --arch=mipsel --include="$include_packages" "$debian_version" "$mp" "$debian_mirror" || exit 1
    return 1
}

fixup_net_dhcp() {
    dev=$1
    f=`echo $dev | tr . -`
    cat > $mp/etc/network/interfaces.d/02-$f <<- EOF
	auto $dev
	iface $dev inet dhcp
	EOF
}

fixup_net_static() {
    dev=$1 ip=$2 script=$3
    f=`echo $dev | tr . -`
    gateway=`ip route show match 0/0 | awk '$2 == "via" {print $3}'`

    cat > $mp/etc/network/interfaces.d/02-$f <<- EOF
	auto $dev
	iface $dev inet static
	pre-up /etc/network/scripts.d/$script
	  address $ip
	  gateway $gateway
	EOF
    cp /etc/resolv.conf $mp/etc/resolv.conf
}

fixup_net() {
    mkdir -p $mp/etc/network/scripts.d
    cat > $mp/etc/network/interfaces.d/01-lo <<- EOF
	auto lo
	iface lo inet loopback
	EOF

    if check_net; then
	:
    else
	echo "WARNING: network is not configured - something wrong WARNING"
	return 1
    fi

    if ps | grep "[u]dhcp.*-i $net_dev" > /dev/null; then
	fixup_net_dhcp ethblack
    else
	fixup_net_static ethblack $net_ip
    fi
}

fixup_modules() {
    mkdir -p $mp/lib/modules
    cp -a /lib/modules/. $mp/lib/modules
}

fixup_leds() {
	cat > "$mp/lib/udev/rules.d/70-gnubee-leds.rules" <<- "EOF"
		ACTION=="add", SUBSYSTEM=="leds", KERNEL=="gb-pc1:green:status", ATTR{trigger}="default-on"
		ACTION=="add", SUBSYSTEM=="leds", KERNEL=="gb-pc1:green:system", ATTR{trigger}="activity"
		EOF
}

fixup() {
    hostname > $mp/etc/hostname
    root=`grep '^root:' /etc/shadow`
    sed -i "s,^root:.*,$root," $mp/etc/shadow
    set `grep " $mp " /proc/mounts`
    sed -i 's/^#PermitRootLogin.*/PermitRootLogin yes/' $mp/etc/ssh/sshd_config
    case $1 in
	/dev/* ) tune2fs -L GNUBEE-ROOT "$1"
		 echo "LABEL=GNUBEE-ROOT / ext4 noatime,errors=remount-ro 0 1" > $mp/etc/fstab
    esac
    fixup_net
    fixup_modules
    fixup_leds
    return 0
}

until set_host && set_debian && set_passwd && set_net && set_time && create_filesystem && bootstrap && fixup; do
    :
done

umount /tmp/newroot
if check_net && [ $net_dev != "ethblack" -a $net_dev != "eth0.1" ]; then
    echo "### REMEMBER: plug the network cable into the first (black) port for normal boot".
fi

echo "## Ready to reboot -f!!"
