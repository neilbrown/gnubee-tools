#!/bin/busybox ash
#  SPDX-License-Identifier: GPL-2.0

set_led() {
    modprobe leds_gpio
    led=$1
    if [ "x$led" != "xsystem" ]; then
	led=status
    fi
    ( cd /sys/class/leds/gb-pc1:green:$led;
      case $# in
	  3 )
	      echo timer > trigger
	      echo $2 > delay_on
	      echo $3 > delay_off
	      ;;
	  * ) echo none > trigger
      esac
    )
}

udhcpd_config() {
    if=$1
    net=$2
    {
	echo "start $net.10"
	echo "end $net.250"
	echo "interface $if"
	echo "lease_file /tmp/udhcpd.leases"
	echo "pidfile /tmp/udhcpd.pid"
	echo "opt subnet 255.255.255.0"
    } > /udhcpd.conf
}

run_shell() {
    PATH=.:$PATH
    export PATH
    tty=$1
    stty erase '^h' < $tty > $tty
    setsid sh -c "exec sh < $tty > $tty 2>&1"
}

need_fix_interfaces() {
    if ip link | grep ethbl > /dev/null &&
	    [ -d /mnt/root/etc/network ]; then
	if grep ethbl /mnt/root/etc/network/interfaces \
		/mnt/root/etc/network/interfaces.d/* > /dev/null ; then
	    # already fixed
	    return 1;
	fi
    fi
    return 0
}

gnubee_switch_root(){
    echo "Partition GNUBEE-ROOT found. Starting..." > /dev/kmsg
    r=`uname -r`
    if [ -d /mnt/root/lib/modules/$r ] &&
	   [ -f /mnt/root/lib/modules/stamp ] &&
	   [ " `cat /lib/modules/stamp`" = " `cat /mnt/root/lib/modules/stamp`" ]
    then : skip - already installed
    else
	# ensure modules are available
	mount -o nosuid,nodev -t tmpfs tmpfs /mnt/root/lib/modules
	cp -a /lib/modules/. /mnt/root/lib/modules/
	# and "keep" is needed of course
	cp /keep /mnt/root/lib/modules/
    fi

    # If this kernel uses ethblack and ethblue, and /etc/network/interfaces*
    # doesn't mention them, then we need to do something, else host will
    # be inaccessible if there is no console.
    # So copy /etc/network to /etc/network.dup, change the eth names, and
    # bind-mount it over.
    if need_fix_interfaces; then
	cp -r /mnt/root/etc/network /tmp/network
	mount -o nosuid,nodev -t tmpfs tmpfs /mnt/root/etc/network
	cp -r /tmp/network/. /mnt/root/etc/network/.
	sed -i -e '/^[^#]/s/eth0.1/ethblack/' -e '/^[^#]/s/eth0.2/ethblue/' \
	    /mnt/root/etc/network/interfaces /mnt/root/etc/network/interfaces.d/*
	# This kernel supports the switch through DSA, so set_switch cannot see it.
	( cd /mnt/root/etc/network/script.d
	  [ -f no_switch ] && echo exit 1 > no_switch
	  [ -f set_switch ] && echo exit 0 > set_switch
	  )
	echo ===== Created temporary /etc/network to handle new interface names ======
    fi

    # kill and dhcp daemon running
    killall udhcpd > /dev/null 2>&1
    killall udhcpc > /dev/null 2>&1

    # stop and unused md arrays, so they can be restarted with
    # the correct name
    mdadm -Ss > /dev/null 2>&1

    # 'down' the network interfaces, but leave the vlans in place
    # as user-space will expect them.  eth0 needs to stay up so
    # that the vlan/DSA interfaces work
    for dev in eth0.1 eth0.2 ethblack ethblue eth1
    do
	ifconfig $dev down
    done

    set_led system
    set_led status

    umount -l /proc /sys /dev/pts /dev
    exec switch_root /mnt/root /sbin/init
}

next_addr() {
    # "increment" last nibble of address
    addr=`echo $1 | sed 's/.$//'`
    last=`echo $1 | sed 's/^.*\(.\)$/\1/'`
    next=`echo $last | tr '0-9a-f' '1-9a-f0'`
    echo "$addr$next"
}

gnubee_boot(){
    mount -t proc none /proc
    mount -t sysfs none /sys
    mount -t devtmpfs devtmpfs /dev
    mkdir /dev/pts
    mount -t devpts devpts /dev/pts

    modprobe ahci
    modprobe xhci_mtk
    modprobe usb_storage
    modprobe sd_mod
    modprobe mtk_sd
    modprobe mmc_block

    modprobe ext4

    modprobe gpio_keys_polled
    modprobe gpio_keys
    modprobe evdev

    # extract MAC address from 'factory' partition
    addr=`dd 2> /dev/null if=/dev/mtd2 bs=1 skip=57344 count=6 | od -t x1 -A none`


    # eth0 needs to be up to able to access ports through the switch
    ifconfig eth0 up

    ip link set ethblack address `echo $addr | tr ' ' :`
    addr=`next_addr "$addr"`
    ip link set ethblue address `echo $addr | tr ' ' :`
    addr=`next_addr "$addr"`
    ip link set eth1 address `echo $addr | tr ' ' :`

    # Wait for devices to appear
    sleep 2

    # Load a config file
    blkid -t TYPE=vfat -o device | while read path; do
	modprobe vfat
	if mount -t vfat $path /mnt; then
	    cat /mnt/gnubee-config.txt >> /gnubee-config.txt
	    umount /mnt
	fi
	rmmod vfat
    done
    [ -f /gnubee-config.txt ] && source /gnubee-config.txt

    if [ " $CONFIGURE_NET" = " yes" ] || evtest --query /dev/input/event0 EV_KEY KEY_RESTART; then
	set_led system 800 200
	# Blue RJ-45 uses DHCP
	ifconfig ethblue up ; udhcpc -b -i ethblue -s /udhcpc.script > /dev/null 2>&1
	# Black RJ-45 (nearest to power jack) has a static address and DHCP server
	if [ " $CONFIGURE_BLACK_IP" != " " ]; then
	    ifconfig ethblack $CONFIGURE_BLACK_IP up
	else
	    ifconfig ethblack 192.168.10.1
	    udhcpd_config ethblack 192.168.10
	    udhcpd /udhcpd.conf
	fi
	if [ ! -s /etc/dropbear/dropbear_ecdsa_host_key ]; then
	    # build host didn't have dropbear, so make a new key on each boot
	    dropbearkey -t ecdsa -f /etc/dropbear/dropbear_ecdsa_host_key
	fi
	dropbear

	run_shell /dev/ttyS0
    fi

    if [ " $CONSOLE_SHELL" = " yes" ]; then
	set_led status 800 200
	run_shell /dev/ttyS0
    fi

    echo -n "Searching for partition GNUBEE-ROOT..." > /dev/kmsg
    set_led system 200 800

    if test -x /bin/mdadm; then
	modprobe md_mod
	echo 1 >  /sys/module/md_mod/parameters/start_ro
	echo "Assembling md arrays" > /dev/kmsg
	mdadm --assemble --scan --auto=md --run --freeze-reshape
    fi

    sleep 1

    while true; do
	crypt_root=`findfs PARTLABEL=GNUBEE-CRYPT-ROOT`
	if test -n "$crypt_root"; then
	    cryptsetup open "$crypt_root" rootdev
	    root_dev="/dev/mapper/rootdev"
	else
            root_dev=`findfs LABEL=GNUBEE-ROOT`
	fi

	mounttype=
	# Make sure filesystem module is loaded for $root_dev
	if [ -n "$root_dev" ]; then
	    eval `blkid $root_dev -o udev`
	    if [ -n "$ID_FS_TYPE" ]; then
		modprobe fs-$ID_FS_TYPE
		mounttype="-t $ID_FS_TYPE"
	    fi
	fi

	if test -n "$root_dev" &&
		mount $mounttype -o ro $root_dev /mnt/root &&
		test -L /mnt/root/sbin/init -o -e /mnt/root/sbin/init &&
		gnubee_switch_root
	then break
	else
	    set_led system
	    set_led status 800 200
	    run_shell /dev/ttyS0
	fi
    done
}

setup_busybox() {
 # If "busybox --list" couldn't be run during mkinitramfs, we
 # need to do it now.
 if busybox test -e /bin/test
 then return
 fi
 for i in `busybox --list`; do
    busybox ln -s /bin/busybox /bin/$i
 done
}

setup_busybox
gnubee_boot
